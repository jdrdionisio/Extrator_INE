dist <- stringdist(x, y, method = "lv")
# Return TRUE if the distance is less than or equal to 2, else FALSE
return(dist <= 3)
}
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
#install.packages('jsonlite', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(jsonlite)
#install.packages("tidyverse", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(tidyverse)
locale("pt")
# install.packages("readxl", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(readxl)
# install.packages("data.table")
library(data.table)
# install.packages("shiny")
library(shiny)
#install.packages('jsonlite', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(jsonlite)
#install.packages("tidyverse", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(tidyverse)
locale("pt")
# install.packages("readxl", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(readxl)
# install.packages("data.table")
library(data.table)
# install.packages("shiny")
library(shiny)
setwd("C:/Users/jdrdionisio/Desktop/RProjects/Projects/INE/INE_API/")
geolinkage_path <- "datasets/geolinkage_aces_2022.csv"
geolinkage_aces <- read_csv(geolinkage_path,col_types = cols(.default = "c"))
colnames(geolinkage_aces)
largest <- geolinkage_aces %>%
filter(aces_2022=="Estrangeiro")
View(largest)
sleep <- function(z){
if (z %% 100 == 0) {
Sys.sleep(5)
z <- 1
}else{
z <- z+1
}
return(z)
}
runApp('INE_API')
shiny::runApp('INE_API')
runApp('INE_API')
shiny::runApp('INE_API')
Indicadores <- read_excel("datasets/Indicadores.xlsx",
skip = 14)%>%
clean_names()%>%
filter(disponivel_no_portal== "Sim")%>%
distinct(designacao, .keep_all = TRUE)
View(Indicadores)
Indicadores <- read_excel("datasets/Indicadores.xlsx",
skip = 14,  col_types = cols(.default = "c"))%>%
clean_names()%>%
filter(disponivel_no_portal== "Sim")%>%
distinct(designacao, .keep_all = TRUE)
Indicadores <- read_excel("datasets/Indicadores.xlsx",  col_types = cols(.default = "c"),
skip = 14)%>%
clean_names()%>%
filter(disponivel_no_portal== "Sim")%>%
distinct(designacao, .keep_all = TRUE)
library(readr)
Indicadores <- read_excel("datasets/Indicadores.xlsx",  col_types = cols(.default = "c"),
skip = 14)%>%
clean_names()%>%
filter(disponivel_no_portal== "Sim")%>%
distinct(designacao, .keep_all = TRUE)
str(Indicadores)
Indicadores <- read_excel("datasets/Indicadores.xlsx",
# col_types = cols(.default = "c"),
skip = 14)%>%
clean_names()%>%
filter(disponivel_no_portal== "Sim")%>%
distinct(designacao, .keep_all = TRUE)
str(Indicadores)
result_list_reactive <- reactiveVal()
runApp('INE_API')
# loads a database of geographical aggregations and Portuguese health clusters
geolinkage_aces <- read_csv("datasets/geolinkage_aces_2022.csv", col_types = cols(.default = "c"), locale = locale("pt"))
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(janitor)
library(readxl)
library(readr)
library(jsonlite)
library(DT)
library(shinyjs)
# loads a database of geographical aggregations and Portuguese health clusters
geolinkage_aces <- read_csv("datasets/geolinkage_aces_2022.csv", col_types = cols(.default = "c"), locale = locale("pt"))
View(geolinkage_aces)
geo_ref_df <- list(geolinkage_aces,
geolinkage_aces[2:20],
geolinkage_aces[2:20],
geolinkage_aces[c(7:20)],
geolinkage_aces[c(7:20)],
geolinkage_aces[c(10:15,19,20)],
geolinkage_aces[c(12:15)])
View(geo_ref_df)
styler:::style_active_file()
# retrieves the available statistics
indicadores <- read_excel("datasets/indicadores.xlsx",
# col_types = cols(.default = "c"),
skip = 14) |>
clean_names() |>
filter(disponivel_no_portal == "Sim") |>
distinct(designacao, .keep_all = TRUE)
View(indicadores)
View(geo_ref_df)
View(geolinkage_aces)
runApp('INE_API')
runApp('INE_API')
styler:::style_active_file()
runApp('INE_API')
codes_list <- list(dicofre_2013, municipio_2013, municipio_2002, nuts_3_2013, nuts_3_2002, nuts_2_2013, "")
dicofre_2013 <- unique(largest_area$dicofre_2013)
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
shiny::runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
# Load a reference table of geographical aggregations and Portuguese health clusters
geo_lookup <- read_csv("datasets/geolinkage_aces_2022.csv", col_types = cols(.default = "c"), locale = locale("pt"))
geo_lookup_distritos <- geo_lookup |> group_by(distrito_2013)
colnames(geo_lookup)
geo_lookup_distritos <- geo_lookup |> group_by(distrito_2013)
View(geo_lookup_distritos)
shiny::runApp('INE_API')
# Remove `unknown` and `abroad` from the reference table
geo_lookup <- geo_lookup |>
filter(!dicofre_2013 %in% c("0", "999999"))
# Load a reference table of geographical aggregations and Portuguese health clusters
geo_lookup <- read_csv("datasets/geolinkage_aces_2022.csv", col_types = cols(.default = "c"), locale = locale("pt"))
# Remove `unknown` and `abroad` from the reference table
geo_lookup <- geo_lookup |>
filter(!dicofre_2013 %in% c("0", "999999"))
# What data should be bound in the end?
geo_ref_df <- list(
geo_lookup,
geo_lookup[2:20],
geo_lookup[2:20],
geo_lookup[c(7:20)],
geo_lookup[c(7:20)],
geo_lookup[c(10:15, 19, 20)],
geo_lookup[c(12:15)]
)
View(geo_ref_df)
View(geo_lookup)
# What data should be bound in the end?
geo_ref_df2 <- list(
freguesia = geo_lookup,
geo_lookup[2:20],
geo_lookup[2:20],
geo_lookup[c(7:20)],
geo_lookup[c(7:20)],
geo_lookup[c(10:15, 19, 20)],
geo_lookup[c(12:15)]
)
# What data should be bound in the end?
geo_ref_df2 <- list(
freguesia = geo_lookup,
municipio_2013 = geo_lookup[3:20],
municipio_2002 = geo_lookup[3:20],
nuts3_2013 = geo_lookup[c(8:20)],
nuts3_2002 = geo_lookup[c(8:20)],
nuts2_2013 = geo_lookup[c(11:15, 19, 20)],
nuts1_2013 = geo_lookup[c(13:15)]
)
View(geo_ref_df2)
# What data should be bound in the end?
geo_ref_df2 <- list(
freguesia = geo_lookup,
municipio_2013 = geo_lookup[3:20],
municipio_2002 = geo_lookup[3:20],
nuts3_2013 = geo_lookup[c(8:20)],
nuts3_2002 = geo_lookup[c(8:20)],
nuts2_2013 = geo_lookup[c(11:20)],
nuts1_2013 = geo_lookup[c(13:20)]
)
geo_ref_df2@freguesia
geo_ref_df2$freguesia
# What data should be bound in the end?
geo_ref_df2 <- list(
freguesia_2013 = geo_lookup,
municipio_2013 = geo_lookup[3:20],
municipio_2002 = geo_lookup[3:20],
nuts3_2013 = geo_lookup[c(8:20)],
nuts3_2002 = geo_lookup[c(8:20)],
nuts2_2013 = geo_lookup[c(11:20)],
nuts1_2013 = geo_lookup[c(13:20)],
pais = geo_lookup[c(15:20)],
aces_2022 = geo_lookup[c(15:20)],
ars_2022 = geo_lookup[c(15:16,19:20)]
)
# What data should be bound in the end?
geo_ref_df2 <- list(
freguesia_2013 = geo_lookup,
municipio_2013 = geo_lookup[3:20],
municipio_2002 = geo_lookup[3:20],
nuts3_2013 = geo_lookup[c(8:20)],
nuts3_2002 = geo_lookup[c(8:20)],
nuts2_2013 = geo_lookup[c(11:20)],
nuts1_2013 = geo_lookup[c(13:20)],
pais = geo_lookup[c(15:20)],
aces_2022 = geo_lookup[c(11:20)],
ars_2022 = geo_lookup[c(13:16,19:20)]
)
extra <- NULL
runApp('INE_API')
runApp('INE_API')
View(geo_lookup)
class(geo_lookup)
runApp('INE_API')
styler:::style_active_file()
?while()
?while
groups_chosen <- Freguesia"
groups_chosen <- "Freguesia"
k <- case_when(
groups_chosen == "Freguesia" ~ 1,
groups_chosen == "Município" ~ 2,
groups_chosen == "Distrito" ~ 2,
groups_chosen == "NUTS III" ~ 4,
groups_chosen == "NUTS II" ~ 6,
groups_chosen == "NUTS I" ~ 7,
groups_chosen == "País" ~ 8,
groups_chosen == "ACES" ~ 2,
groups_chosen == "ARS" ~ 2,
# If all others fail, the default is the parish level
TRUE ~ 1)
groups_chosen <- "NUTS I"
k <- case_when(
groups_chosen == "Freguesia" ~ 1,
groups_chosen == "Município" ~ 2,
groups_chosen == "Distrito" ~ 2,
groups_chosen == "NUTS III" ~ 4,
groups_chosen == "NUTS II" ~ 6,
groups_chosen == "NUTS I" ~ 7,
groups_chosen == "País" ~ 8,
groups_chosen == "ACES" ~ 2,
groups_chosen == "ARS" ~ 2,
# If all others fail, the default is the parish level
TRUE ~ 1)
shiny::runApp('INE_API')
styler:::style_active_file()
shiny::runApp('INE_API')
shiny::runApp('INE_API')
shiny::runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
?sym
shiny::runApp('INE_API')
styler:::style_active_file()
shiny::runApp('INE_API')
shiny::runApp('INE_API')
shiny::runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
shiny::runApp('INE_API')
geo_lookup <-
read_csv(
"datasets/geolinkage_aces_2022.csv",
col_types = cols(.default = "c"),
locale = locale("pt")
)
View(geo_lookup)
runApp('INE_API')
shiny::runApp('INE_API')
shiny::runApp('INE_API')
shiny::runApp('INE_API')
styler:::style_active_file()
runApp('INE_API')
styler:::style_active_file()
success <- c(10)
success <- c(success, 7)
success <- arrange(c(success, 2))
class(success)
success <- arrange(success)
success <- sort(c(success, 2))
shiny::runApp('INE_API')
shiny::runApp('INE_API')
runApp('INE_API')
#
# Find out more about building applications with Shiny here:
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
install.packages("sass")
a <-  fromJSON("https://json.geoapi.pt/cp/1500-000")
library(jsonlite)
a <-  fromJSON("https://json.geoapi.pt/cp/1500-000")
a <-  fromJSON("https://json.geoapi.pt/cp/3040-657")
urls <- c("https://json.geoapi.pt/cp/3040-657", "https://json.geoapi.pt/cp/1500-000")
# Loop through the URLs
for (url in urls) {
tryCatch({
# Try to get the JSON data
data <- fromJSON(url)
# Do something with the data
print(data)
}, error = function(e) {
# If there's an error, print the error message and continue with the next element
message(paste("Error:", e$message))
next
})
}
urls <- c("https://json.geoapi.pt/cp/1500-000", "https://json.geoapi.pt/cp/3040-657")
# Loop through the URLs
for (url in urls) {
tryCatch({
# Try to get the JSON data
data <- fromJSON(url)
# Do something with the data
print(data)
}, error = function(e) {
# If there's an error, print the error message and continue with the next element
message(paste("Error:", e$message))
next
})
}
urls <- c("https://json.geoapi.pt/cp/1500-000", "https://json.geoapi.pt/cp/3040-657")
# Loop through the URLs
for (url in urls) {
tryCatch({
# Try to get the JSON data
data <- fromJSON(url)
# Do something with the data
print(data)
}, error = function(e) {
# If there's an error, print the error message and continue with the next element
message(paste("Error:", e$message))
next
})
}
urls <- c("https://json.geoapi.pt/cp/1500-000", "https://json.geoapi.pt/cp/3040-657")
# Loop through the URLs
for (url in urls) {
tryCatch({
# Try to get the JSON data
data <- fromJSON(url)
# Do something with the data
print(data)
}, error = function(e) {
# If there's an error, print the error message and continue with the next element
message(paste("Error:", e$message))
next
})
}
View(geo_ref_df)
a <- fromJSON("https://json.geoapi.pt/cp/3040-657")
View(a)
# Find out more about building applications with Shiny here:
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
library(shiny)
#
# Find out more about building applications with Shiny here:
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
install.packages("bslib")
# Define UI for application that draws a histogram
thematic::thematic_shiny(font_google("OpenSans"))
library(bslib)
# Define UI for application that draws a histogram
thematic::thematic_shiny(font_google("OpenSans"))
library(thematic)
# Find out more about building applications with Shiny here:
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
install.packages("thematic")
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
# install.packages("thematic")
install.packages("shinycssloaders")
library(shinycssloaders)
shiny::runApp('INE_API')
runApp('test')
runApp('INE_API')
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
# install.packages("thematic")
# install.packages("shinycssloaders")
install.packages("shinycssloaders")
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
install.packages("remotes")
remotes::install_github("daattali/shinycssloaders")
detach("package:shinycssloaders", unload = TRUE)
remove.packages("shinycssloaders")
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
# install.packages("thematic")
# install.packages("shinycssloaders")
remotes::install_github("daattali/shinycssloaders")
library(shinycssloaders)
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
# install.packages("thematic")
install.packages("shinycssloaders")
remove.packages("shinycssloaders")
library(shinycssloaders)
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
# install.packages("thematic")
install.packages("shinycssloaders")
install.packages("shinycssloaders")
#    http://shiny.rstudio.com/
#
# install.packages("shinyWidgets")
# install.packages("fuzzyjoin")
# install.packages("DT")
# install.packages("shinyjs")
# install.packages('rsconnect')
# install.packages('stringdist')
# install.packages("bslib")
# install.packages("thematic")
install.packages("shinycssloaders")
install.packages("shinycssloaders")
runApp('INE_API')
library(shinycssloaders)
shiny::runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
runApp('INE_API')
