# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
}
})
View(df_list)
map(file_names, function(file_name) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
}
return(df_list)
}
)
map(file_names, function(file_name) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
}
}
return(df_list)
map(file_names, function(file_name) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
return(df_list)
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
return(df_list)
}
}
)
# Assign the components to variables
indicador <- components[1]
map(file_names, function(file_name) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
names(df_list)
map(file_names, function(file_name) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
return(df_list)
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
return(df_list)
}
}
)
map(file_names, function(file_name, df_list) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
return(df_list)
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
return(df_list)
}
}
)
map(file_names, function(file_name, df_list) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
return(df_list)
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
return(df_list)
}
}
)
map(file_names, function(file_name, df_list) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
}
}
)
map(file_names, function(file_name, df_list) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
return(df_list)
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
return(df_list)
}
}, df_list)
View(df_list)
View(df_list)
# Initialize a list to store the data frames
df_list <- list(dados, dados1)
# Initialize a list to store the data frames
df_list <- list(dados, dados1)
View(df_list)
View(df_list)
View(df_list)
View(df_list)
View(df_list)
# Initialize a list to store the data frames
df_list <- list(dados, dados1)
# Initialize a list to store the data frames
df_list <- list(dados, dados1)
# Initialize a list to store the data frames
df_list <- list(dados, dados1)
# Initialize a list to store the data frames
df_list <- list()
map(file_names, function(file_name, df_list) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
}
}, df_list)
install.packages('jsonlite', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(jsonlite)
install.packages("tidyverse", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(tidyverse)
install.packages("readxl", dependencies=TRUE, repos='http://cran.rstudio.com/')
library(readxl)
install.packages("data.table", dependencies=TRUE)
install.packages("readxl", dependencies = TRUE, repos = "http://cran.rstudio.com/")
library("data.table")
linkage_geo <- read_csv("datasets/linkage_geo.csv")%>%
mutate(last_4 = as.character(substr(cod_geo, nchar(cod_geo)-3,nchar(cod_geo))))
linkage_geo_freg <- read_csv2("datasets/categorias_geo_freg.csv")%>%
select(-municip)%>%
rename(last_4 =pair)%>%
left_join(linkage_geo,by = "last_4")
linkage_geo <- linkage_geo %>%
select(geo, ars, nuts3, aces2, nuts1, nuts2, cod_geo_nuts2002, cod_geo)%>%
rename(municip="geo")%>%
mutate(municip= recode(municip, "Calheta"="Calheta [R.A. Madeira]"))%>%
rename(geocod = "cod_geo")
# Get a list of file names
file_names <- list.files(path = "outputs", pattern = ".*\\.csv")
# Initialize a list to store the data frames
df_list <- list()
# Use map to process each file name
map(file_names, function(file_name, df_list) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
}
}, df_list)
View(df_list)
# Initialize a list to store the data frames
df_list <- list(dados)
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
}
}
View(df_list)
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicator]] <- rbind(df_list[[indicator]], df)
}
}
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
}
}
View(df_list)
file_names <- list.files(path = "outputs", pattern = ".*\\.csv")
# Initialize a list to store the data frames
df_list <- list()
#FOR LOOP
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, "_")[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
}
}
View(df_list)
components
# Split the file name into its components
components <- strsplit(file_name, c("_",".")[[1]]
# Assign the components to variables
indicador <- components[1]
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, c("_",".")[[1]]
components
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, c("_",".")[[1]])
components
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, c("_",".")[[1]])
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
}
}
components
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, c("_","."))[[1]]
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
}
}
components
df_list <- list()
#FOR LOOP
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, c("_"))[[1]]
# Remove the ".csv" extension from the last component
last_component <- sub(".csv", "", components[length(components)])
# Replace the last component in the components vector
components[length(components)] <- last_component
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
}
}
components
components[length(components)
# Replace the last component in the components vector
components[length(components)] <- last_component
components[length(components)]
# Remove the ".csv" extension from the last component
last_component <- sub(".csv", "", components[length(components)])
last_component
# Replace the last component in the components vector
components[length(components)] <- last_component
components
file_names <- list.files(path = "outputs", pattern = ".*\\.csv")
# Initialize a list to store the data frames
df_list <- list()
#FOR LOOP
for (file_name in file_names) {
# Split the file name into its components
components <- strsplit(file_name, c("_"))[[1]]
# Remove the ".csv" extension from the last component
last_component <- sub(".csv", "", components[length(components)])
components[length(components)]
# Replace the last component in the components vector
components[length(components)] <- last_component
# Assign the components to variables
indicador <- components[1]
year <- components[2]
aggregation <- components[3]
# Load the file into a data frame
df <- read.csv(file.path("outputs", file_name))
# Add columns for year and aggregation
df <- cbind(df, year = year, aggregation = aggregation)
# Check if a data frame for this indicator already exists
if (!(indicador %in% names(df_list))) {
# If not, create a new data frame for this indicator
df_list[[indicador]] <- df
} else {
# If it does, use rbind to combine the data frames
df_list[[indicador]] <- rbind(df_list[[indicador]], df)
}
}
unnest(df_list)
unnest(df_list, cols = c(`0008614`, `0009817`))
unnest(df_list, .cols = c(`0008614`, `0009817`))
df_list$0008614
df_list[0008614]
View(df_list)
df_list[["0008614"]]
lapply(df_list, function(df) {
write.csv(df, file.path("outputs", paste0(names(df), ".csv")))
})
lapply(df_list, function(df)){
lapply(df_list, function(df){
write.csv(df, file.path("outputs", paste0(names(df), ".csv")))
})
View(df_list)
map(df_list, ~ write.csv(.x, file.path("outputs", paste0(.y, ".csv"))))
map(df_list,write.csv(.x, file.path("outputs", paste0(.y, ".csv"))))
map(df_list~write.csv(.x, file.path("outputs", paste0(.y, ".csv"))))
for (df_name in names(df_list)) {
df <- df_list[[df_name]]
write.csv(df, file.path("outputs", paste0(df_name, ".csv")))
}
